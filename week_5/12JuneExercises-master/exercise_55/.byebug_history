continue
game.winning_points
game = Game.new("om","om2")
continue
game.winning_points
game = Game.new("om","om2")
step
continue
game.winning_points
game = Game.new("om","om2")
move
game.winning_points
game = Game.new("om","om2")
move
ls
step
continue
game.winning_points
game = Game.new("om","om2")
move
step
continue
@move
game.winning_points
game = Game.new("om","om2")
continue
@move
game.winning_points
game = Game.new("om","om2")
game = Game.new(om,om2)
game = Game.new(om,om2
Game.new
m =Game.new(Om,make)
continue
@@move
step
ls
move
step
continue
step
getOmove
step
continue
count[2]
count =[1..9]
irb
move
step
continue
move
@move
step
@move
move
ls
continue
@move
continue
game
continue
@@move
step
move
continue
@@move
move
@@move
@bot_move
continue
ls
@bot_move
val
step
val[opponant_move]
val[opponant_move
opponant_move
step
continue
opponant_move
val[opponant_move]
val
val[opponant_move]
step
continue
opponant_move
val
val[opponant_move]
@val[opponant_move].each{|num|include?@bot_move}
step
num
move
step
continue
@bot_move
step
continue
num
step
continue
step
continue
val
key
key[opponant_move]
@bot_move
num
step
continue
opponant_move
key[opponant_move]
@bot_move
step
continue
@bot_move
num
step
@bot_move
num
\
num
@move_move
step
continue
num
key
move
step
